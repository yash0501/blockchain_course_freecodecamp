// pragma solidity ^0.6.0; it declares that any solidity version greater than 0.6.0 but less than 0.7.0 will be able to run this code.
// contract keyword is used to define a smart contract

// next we create contract
// similar to class in any object oriented lang
// write contract identifier first and then write the name of the contract

// by default a variable is of the type of internal
// there are 4 types of variable declaration in solidity
// public, internal, external, private
// public defines that the values stored in a variable can be assessed even outside the blockchain
//uint256 favouriteNumber; // initialises null to variable
    
// now we create functions to add power to our contract
    
// creating a public funtion to change the value of stored integer
    
// now create a function to retrieve value of variable
// retrieve function is a view only function which will return a variable of type uint

// view means we want to just view the state of the blockchain
// pure functions do not read or modify the state of blockchain
    
// now we want to assosiate a favourite number to a person or similar thing
// to do so we use struct to define a new data structure
// in storage all the state variables are declared with a 
    
// array are declared in the similar way like we declare in any other programming language

// now we will create a function to add to our array dynamically
// use array.push() to append to the array
// to use a string as parameter, add memory after string because string is an object

